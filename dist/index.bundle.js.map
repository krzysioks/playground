{"version":3,"file":"index.bundle.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/style/base.css","webpack:///./src/Playground.js","webpack:///./src/common/utils.js","webpack:///./src/component/Hooks.js","webpack:///./src/component/PgInput.js","webpack:///./src/component/TaskLogin.js","webpack:///./src/component/TaskMainView.js","webpack:///./src/component/TaskRegister.js","webpack:///./src/component/Unauthorized.js","webpack:///./src/index.js","webpack:///./src/style/base.css?9bc7"],"sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"index\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"./src/index.js\",\"vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"html,\\nbody {\\n  height: 100%;\\n  background-color: #d3d3d3;\\n}\\n.dark {\\n  background-color: rgb(211, 211, 211);\\n}\\n.app {\\n  height: 100%;\\n}\\n.loginCard {\\n  width: 300px;\\n  height: 450px;\\n}\\n.statusContainer {\\n  top: 7px;\\n  margin: 0px 45px 0px 45px;\\n}\\n.statusLabel {\\n  top: -2px;\\n}\\n.pointer {\\n  cursor: pointer;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React from 'react';\nimport Hooks from './component/Hooks';\nimport TaskLogin from './component/TaskLogin';\nimport TaskRegister from './component/TaskRegister';\nimport TaskMainView from './component/TaskMainView';\nimport Unauthorized from './component/Unauthorized';\nimport { HashRouter, Route, Redirect, Switch } from 'react-router-dom';\n\nconst Playground = () => {\n    return (\n        // router used to route between entry point components which implements different exercises\n        //hooks - simple example of hooks\n        //task - app to learn how to use: frontend - hooks, formik (building forms), validation; backend - REST, authentication, mongodb\n        <HashRouter>\n            <Switch>\n                <Route path=\"/hooks\" component={Hooks} />\n                <Route path=\"/task/login\" component={TaskLogin} />\n                <Route path=\"/task/register\" component={TaskRegister} />\n                <Route path=\"/task/mainview\" component={TaskMainView} />\n                <Route path=\"/task/unauthorized\" component={Unauthorized} />\n                <Redirect from=\"/\" to=\"/task/login\" exact />\n            </Switch>\n        </HashRouter>\n    );\n};\n\nexport default Playground;","export async function postXhr(url, content = {}, header = {}) {\n    let headerObj = {\n        'Content-Type': 'application/json'\n    };\n\n    if (Object.keys(header)) {\n        headerObj = Object.assign(headerObj, header);\n    }\n\n    const fetchResponse = await fetch(url, {\n        method: 'POST',\n        credentials: 'include',\n        headers: new Headers(headerObj),\n        body: JSON.stringify(content)\n    });\n    const statusResponse = checkStatus(fetchResponse);\n    return parseJSON(statusResponse);\n}\n\nexport async function getXhr(url, header = {}) {\n    let headerObj = {\n        'Content-Type': 'application/json'\n    };\n\n    if (Object.keys(header)) {\n        headerObj = Object.assign(headerObj, header);\n    }\n\n    const fetchResponse = await fetch(url, {\n        credentials: 'include',\n        method: 'GET',\n        headers: new Headers(headerObj)\n    });\n    const statusResponse = checkStatus(fetchResponse);\n    return parseJSON(statusResponse);\n}\n\nfunction parseJSON(response) {\n    return response.json();\n}\nfunction checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n        return response;\n    } else {\n        const error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n    }\n}","import React, { useState, useEffect } from 'react';\nconst Hooks = () => {\n    // useEffect hook is called after every render. To simulate componentDidMount lifecycle method pass empty array as a second argument. useEffect() will be called after render only if any parameter from the list have changed.\n    useEffect(() => {\n        fetch('./test')\n            .then(res => res.json())\n            .then(response => {\n                console.log('response', response);\n            });\n    }, []);\n\n    const [counter, setCounter] = useState(0);\n    const _onClickHandler = () => {\n        const newValue = counter + 1;\n        setCounter(newValue);\n    };\n\n    return (\n        <div>\n            <div>Counter: {counter}</div>\n            <button onClick={_onClickHandler}>Count</button>\n        </div>\n    );\n}\nexport default Hooks;","import React from 'react';\nimport { Input, FormFeedback } from 'reactstrap';\n\nconst PgInput = ({ field,\n    form: { touched, errors },\n    ...props }) => (\n        <div>\n            <Input {...field} {...props} invalid={!!(touched[field.name] &&\n                errors[field.name])} />\n            {touched[field.name] &&\n      errors[field.name] && <FormFeedback>{errors[field.name]}</FormFeedback>}\n        </div>\n    );\n\nexport default PgInput;","import React from 'react';\nimport useLocalStorage from 'react-use-localstorage';\nimport { Link, withRouter } from 'react-router-dom';\nimport PgInput from './PgInput';\nimport { Card, CardBody, CardTitle, Button } from 'reactstrap';\nimport { Formik, Field, Form } from 'formik';\nimport { postXhr } from '../common/utils';\nimport * as Yup from 'yup';\n\nconst LoginSchema = Yup.object().shape({\n    username: Yup.string()\n        .min(2, 'User name is too short')\n        .max(50, 'User name is too long')\n\n        .required('Username is required'),\n    password: Yup.string()\n        .min(8, 'Password too short')\n        .matches(/(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()])/, 'Password must have at least one: large and small letter, number, special character \"!@#$%^&*())\"')\n        .required('Password is required')\n});\n\nconst TaskLogin = (props) => {\n    const [, setItem] = useLocalStorage('token', '');\n    const handleSubmit = async (values, actions) => {\n        const { isUser, passwordMatched, token } = await postXhr('/task/login', values);\n        if (isUser) {\n            if (passwordMatched) {\n                //case when all ok. navigate to task main view which requires authentication and pass token in localStorage\n                setItem(token);\n                props.history.push('/task/mainview');\n            } else {\n                actions.setErrors({ password: 'Password does not match' });\n            }\n        } else {\n            actions.setErrors({ username: 'User does not exist' });\n        }\n        actions.setSubmitting(false);\n    };\n\n    return (\n        <div className=\"app d-flex justify-content-center align-items-center\">\n            <Card className=\"loginCard\">\n                <CardBody>\n                    <CardTitle>Welcome to Task App</CardTitle>\n                    <Formik\n                        initialValues={{ username: '', password: '' }}\n                        validationSchema={LoginSchema}//schema used to validate form fields\n                        //below are destructured Formik props, which represent the state of form (i.e. if it is valid or not, if any value changed...)\n                        onSubmit={handleSubmit}\n                        component={({ isValid, isSubmitting }) => (\n                            < Form >\n                                <Field component={PgInput} name=\"username\" className=\"mt-1\" type=\"text\" placeholder=\"user name\" />\n                                {/* PgInput wraps reactstrap form input component and add error msg\n                                 placeholder so it is possible to use material design components with Formik */}\n                                <Field component={PgInput} name=\"password\" className=\"mt-1\" type=\"password\" placeholder=\"password\" />\n                                <div className=\"d-flex flex-row justify-content-between mt-2\">\n                                    <Button disabled={!isValid || isSubmitting} color=\"secondary\">log in</Button>\n                                    <Link className=\"align-self-end\" to=\"/task/register\">register</Link>\n                                </div>\n                            </Form>\n                        )}\n                    />\n                </CardBody>\n            </Card>\n        </div >\n    );\n};\nexport default withRouter(TaskLogin);","import React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport useLocalStorage from 'react-use-localstorage';\nimport PgInput from './PgInput';\nimport { Card, CardBody, Button, Label, Table, Input, FormFeedback } from 'reactstrap';\nimport { Formik, Field, Form } from 'formik';\nimport { getXhr, postXhr } from '../common/utils';\nimport { MdModeEdit, MdDelete, MdDone, MdUndo } from 'react-icons/md';\nimport * as Yup from 'yup';\n\nconst TaskSchema = Yup.object().shape({\n    name: Yup.string()\n        .min(2, 'User name is too short')\n        .max(50, 'User name is too long')\n        .required('Name of the task is required')\n});\n\nconst TaskMainView = props => {\n    const [token] = useLocalStorage('token');\n    const [taskList, setTaskList] = useState([]);\n    const [isAuthorized, setIsAuthorized] = useState(false);\n    const [editRowId, setEditRowId] = useState(null);\n\n    // useEffect hook is called after every render. To simulate componentDidMount lifecycle method pass empty array as a second argument. useEffect() will be called after render only if any parameter from the list have changed.\n    useEffect(() => {\n        (getTaskList)();\n    }, []);\n\n    const handleSubmit = async (values, actions) => {\n        try {\n            const { taskAdded, statusList } = await postXhr('/task/add', values, {\n                'x-auth': token\n            });\n            if (taskAdded) {\n                actions.resetForm();\n                actions.setStatus({ msg: 'Task added' });\n                await getTaskList();\n                window.setTimeout(() => {\n                    actions.setStatus({ msg: '' });\n                }, 5000);\n            } else {\n                const errorObj = {};\n                statusList.forEach(([key, , msg]) => {\n                    errorObj[key] = msg;\n                });\n                actions.setErrors(errorObj);\n            }\n            actions.setSubmitting(false);\n        } catch (err) {\n            setIsAuthorized(false);\n            props.history.push('/task/unauthorized');\n        }\n    };\n\n    const handleEditMode = async key => {\n        const keyToSet = key === editRowId ? null : key;\n        setEditRowId(keyToSet);\n    };\n\n    const handleAction = async (url, body) => {\n        try {\n            await postXhr(url, body, {\n                'x-auth': token\n            });\n            getTaskList();\n        } catch (err) {\n            setIsAuthorized(false);\n            props.history.push('/task/unauthorized');\n        }\n    };\n\n    const handleKeyDown = async (_id, evt) => {\n        if (evt.keyCode === 13) {\n            handleAction('/task/edit', {\n                _id,\n                name: evt.target.value\n            });\n        }\n    };\n\n    const handleLogout = async () => {\n        try {\n            await postXhr('task/logout', {}, {\n                'x-auth': token\n            });\n            props.history.push('/task/login');\n        } catch (err) {\n            setIsAuthorized(false);\n            props.history.push('/task/unauthorized');\n        }\n    };\n\n    const getTaskList = async () => {\n        try {\n            //if any field in the row is in edit mode -> turn it off\n            setEditRowId(null);\n            const { tasks } = await getXhr('/task/all', {\n                'x-auth': token\n            });\n            setTaskList(tasks);\n            setIsAuthorized(true);\n        } catch (err) {\n            setIsAuthorized(false);\n            props.history.push('/task/unauthorized');\n        }\n    };\n\n    return isAuthorized ? (<div>\n        <Card className=\"dark\">\n            <CardBody className=\"d-flex flex-row justify-content-between\">\n                <Button onClick={getTaskList} color=\"secondary\">Refresh</Button>\n                <Button onClick={handleLogout} color=\"secondary\">logout</Button>\n            </CardBody>\n            <CardBody>\n                <Formik\n                    initialValues={{ name: '', status: false }}\n                    validationSchema={TaskSchema}\n                    onSubmit={handleSubmit}\n                    component={({ isValid, isSubmitting, status }) => (\n                        < Form >\n                            <div className=\"d-flex flex-row\">\n                                <Field component={PgInput} name=\"name\" className=\"mr-2\" type=\"text\" placeholder=\"task name\" />\n                                <div className=\"position-relative statusContainer\">\n                                    <Field component={PgInput} name=\"status\" type=\"checkbox\" id=\"_taskstatus\" />\n                                    <Label className=\"position-relative statusLabel\" for=\"_taskstatus\" >completed</Label>\n                                </div>\n                                <Button disabled={!isValid || isSubmitting} color=\"secondary\">Add</Button>\n                            </div>\n                            {status && status.msg ? (<div>\n                                <Input type=\"hidden\" valid />\n                                <FormFeedback valid>{status.msg}</FormFeedback>\n                            </div>\n                            ) : ''}\n                        </Form>\n                    )}\n                />\n            </CardBody>\n            <CardBody>\n                <Table striped dark>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Created</th>\n                            <th>Status</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {taskList.length ? taskList.map(({ name, status, creationDate, _id }, key) => (\n                            <tr key={key}>\n                                <td>{editRowId === key ? (<Input onKeyDown={handleKeyDown.bind(null, _id)} type=\"text\" defaultValue={name} />) : name}</td>\n                                <td>{new Date(creationDate).toLocaleDateString('pl-PL', { hour: '2-digit', minute: '2-digit' })}</td>\n                                <td>{status ? 'Completed' : 'Not Completed'}</td>\n                                <td>{status ? <MdUndo onClick={handleAction.bind(null, '/task/edit', { _id, status: false })} /> : <MdDone onClick={handleAction.bind(null, '/task/edit', { _id, status: true })} />} <MdModeEdit onClick={handleEditMode.bind(null, key)} /> <MdDelete onClick={handleAction.bind(null, '/task/delete', { _id })} /> </td>\n                            </tr>\n                        )) : (<tr><td colSpan='4'>No data to display</td></tr>)}\n                    </tbody>\n                </Table>\n            </CardBody>\n        </Card>\n    </div>\n    ) : (<div>Loading...</div>);\n};\nexport default withRouter(TaskMainView);\n\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport PgInput from './PgInput';\nimport { Card, CardBody, CardTitle, Button, FormFeedback, Input } from 'reactstrap';\nimport { Formik, Field, Form } from 'formik';\nimport { postXhr } from '../common/utils';\nimport * as Yup from 'yup';\n\nconst RegisterSchema = Yup.object().shape({\n    username: Yup.string()\n        .min(2, 'User name is too short')\n        .max(50, 'User name is too long')\n        .required('Username is required'),\n    password: Yup.string()\n        .min(8, 'Password too short')\n        .matches(/(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()])/, 'Password must have at least one: large and small letter, number, special character \"!@#$%^&*())\"')\n        .required('Password is required'),\n    email: Yup.string()\n        .required('Email is required')\n        .email('Email is invalid')\n});\n\nconst TaskRegister = () => {\n    const handleSubmit = async (values, actions) => {\n        //check if password match with retyped one\n        if (values.password === values.retypedpassword) {\n            const { userRegistered, statusList } = await postXhr('/task/register', values);\n            if (userRegistered) {\n                actions.setStatus({ msg: `Dear ${values.username}, you signed up successfully.` });\n            } else {\n                const errorObj = {};\n                statusList.forEach(([key, , msg]) => {\n                    errorObj[key] = msg;\n                });\n                actions.setErrors(errorObj);\n            }\n        } else {\n            actions.setErrors({\n                retypedpassword: 'Passwords do not match'\n            });\n        }\n\n        actions.setSubmitting(false);\n    }\n\n    return (\n        <div className=\"app d-flex justify-content-center align-items-center\">\n            <Card className=\"loginCard\">\n                <CardBody>\n                    <CardTitle>Please sign up to use Task App</CardTitle>\n                    <Formik\n                        initialValues={{ username: '', password: '', email: '', retypedpassword: '' }}\n                        validationSchema={RegisterSchema}\n                        onSubmit={handleSubmit}\n                        component={({ isValid, isSubmitting, status }) => (\n                            < Form >\n                                <Field component={PgInput} name=\"username\" className=\"mt-1\" type=\"text\" placeholder=\"user name\" />\n                                <Field component={PgInput} name=\"password\" className=\"mt-1\" type=\"password\" placeholder=\"password\" />\n                                <Field component={PgInput} name=\"retypedpassword\" className=\"mt-1\" type=\"password\" placeholder=\"retype password\" />\n                                <Field component={PgInput} name=\"email\" className=\"mt-1\" type=\"text\" placeholder=\"example@domian.com\" />\n\n                                {status && status.msg ? (<div>\n                                    <Input type=\"hidden\" valid />\n                                    <FormFeedback valid>{status.msg}</FormFeedback>\n                                </div>\n                                ) : ''}\n                                <div className=\"d-flex flex-row justify-content-between mt-2\">\n                                    <Button type=\"submit\" disabled={!isValid || isSubmitting} color=\"secondary\">sign up</Button>\n                                    <Link className=\"align-self-end\" to=\"/task/login\">cancel</Link>\n                                </div>\n                            </Form>\n                        )}\n                    />\n                </CardBody>\n            </Card>\n        </div >\n    );\n}\nexport default withRouter(TaskRegister);","import React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport { Alert } from 'reactstrap';\n\n\nconst Unauthorized = () => {\n    return (\n        <div>\n            <Alert color=\"danger\" className=\"d-flex justify-content-center\">\n                You are not authorized to access this page. Please<Link className=\"ml-1\" to=\"/task/login\"> log in</Link>\n            </Alert>\n        </div>\n    );\n}\nexport default withRouter(Unauthorized);","import Playground from './Playground';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './style/base.css';\n\nReactDOM.render(<Playground />, document.getElementById('playground'));\n","var api = require(\"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../node_modules/css-loader/dist/cjs.js!./base.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(module.id, content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;"],"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","sourceRoot":""}